const cron = require('node-cron');
const blockchainService = require('./blockchain');
const imageGenerator = require('./imageGenerator');

class Scheduler {
    constructor() {
        this.tasks = new Map();
        this.isRunning = false;
    }

    initialize() {
        try {
            console.log('üïê Inicializando programador de tareas...');
            
            // Programar sorteo autom√°tico cada lunes a las 00:00 UTC
            this.scheduleWeeklyDraw();
            
            // Programar actualizaci√≥n de im√°genes cada 5 minutos
            this.scheduleImageUpdates();
            
            // Programar verificaci√≥n de estado cada hora
            this.scheduleStatusChecks();
            
            this.isRunning = true;
            console.log('‚úÖ Programador de tareas inicializado');
        } catch (error) {
            console.error('‚ùå Error inicializando programador:', error);
            throw error;
        }
    }

    scheduleWeeklyDraw() {
        // Ejecutar cada lunes a las 00:00 UTC
        const task = cron.schedule('0 0 * * 1', async () => {
            console.log('üé∞ Ejecutando sorteo semanal...');
            await this.executeWeeklyDraw();
        }, {
            scheduled: false,
            timezone: 'UTC'
        });

        this.tasks.set('weeklyDraw', task);
        task.start();
        
        console.log('üìÖ Sorteo semanal programado para cada lunes a las 00:00 UTC');
    }

    scheduleImageUpdates() {
        // Actualizar im√°genes cada 5 minutos
        const task = cron.schedule('*/5 * * * *', async () => {
            try {
                console.log('üñºÔ∏è Actualizando im√°genes del frame...');
                await this.updateFrameImages();
            } catch (error) {
                console.error('Error updating frame images:', error);
            }
        }, {
            scheduled: false
        });

        this.tasks.set('imageUpdates', task);
        task.start();
        
        console.log('üñºÔ∏è Actualizaci√≥n de im√°genes programada cada 5 minutos');
    }

    scheduleStatusChecks() {
        // Verificar estado cada hora
        const task = cron.schedule('0 * * * *', async () => {
            try {
                console.log('üìä Verificando estado de la loter√≠a...');
                await this.checkLotteryStatus();
            } catch (error) {
                console.error('Error checking lottery status:', error);
            }
        }, {
            scheduled: false
        });

        this.tasks.set('statusChecks', task);
        task.start();
        
        console.log('üìä Verificaci√≥n de estado programada cada hora');
    }

    async executeWeeklyDraw() {
        try {
            console.log('üé≤ Iniciando proceso de sorteo semanal...');
            
            // Verificar que la loter√≠a est√© lista para el sorteo
            const lotteryInfo = await blockchainService.getCurrentLotteryInfo();
            
            if (!lotteryInfo.isActive) {
                console.log('‚ö†Ô∏è La loter√≠a no est√° activa, saltando sorteo');
                return;
            }

            if (lotteryInfo.timeRemaining > 0) {
                console.log('‚ö†Ô∏è La loter√≠a a√∫n no ha terminado, saltando sorteo');
                return;
            }

            // Ejecutar el sorteo
            console.log('üéØ Ejecutando sorteo en blockchain...');
            const drawResult = await blockchainService.executeDraw();
            
            console.log('‚úÖ Sorteo completado:', {
                transactionHash: drawResult.transactionHash,
                lotteryId: drawResult.lotteryId,
                winningNumbers: drawResult.winningNumbers,
                winnersCount: drawResult.winners?.length || 0
            });

            // Generar imagen con resultados
            await this.generateResultsImage(drawResult);
            
            // Notificar resultados (aqu√≠ podr√≠as integrar con Twitter, Discord, etc.)
            await this.notifyResults(drawResult);
            
            console.log('üéâ Proceso de sorteo semanal completado');
            
        } catch (error) {
            console.error('‚ùå Error ejecutando sorteo semanal:', error);
            
            // Intentar notificar el error
            try {
                await this.notifyError('Error en sorteo semanal', error);
            } catch (notifyError) {
                console.error('Error notificando fallo:', notifyError);
            }
        }
    }

    async updateFrameImages() {
        try {
            // Generar imagen de estado actual
            const lotteryInfo = await blockchainService.getCurrentLotteryInfo();
            const ticketsSold = await blockchainService.getTicketsSold(lotteryInfo.id);
            const totalPrize = await blockchainService.getTotalPrize();
            
            const statusData = {
                type: 'status',
                lotteryInfo,
                ticketsSold,
                totalPrize,
                timeRemaining: lotteryInfo.timeRemaining
            };
            
            // Generar y guardar imagen (opcional)
            await imageGenerator.generateFrameImage(statusData);
            
        } catch (error) {
            console.error('Error updating frame images:', error);
        }
    }

    async checkLotteryStatus() {
        try {
            const lotteryInfo = await blockchainService.getCurrentLotteryInfo();
            const ticketsSold = await blockchainService.getTicketsSold(lotteryInfo.id);
            
            console.log('üìä Estado actual:', {
                lotteryId: lotteryInfo.id,
                isActive: lotteryInfo.isActive,
                ticketsSold,
                timeRemaining: lotteryInfo.timeRemaining
            });
            
            // Verificar si es hora de ejecutar el sorteo
            if (lotteryInfo.isActive && lotteryInfo.timeRemaining <= 0) {
                console.log('‚è∞ Es hora de ejecutar el sorteo');
                await this.executeWeeklyDraw();
            }
            
        } catch (error) {
            console.error('Error checking lottery status:', error);
        }
    }

    async generateResultsImage(drawResult) {
        try {
            const resultsData = {
                type: 'results',
                lastResult: {
                    winningNumbers: drawResult.winningNumbers.join(', '),
                    winnersCount: drawResult.winners?.length || 0
                },
                results: [{
                    id: drawResult.lotteryId,
                    winningNumbers: drawResult.winningNumbers,
                    winners: drawResult.winners || []
                }]
            };
            
            const imageBuffer = await imageGenerator.generateFrameImage(resultsData);
            
            // Aqu√≠ podr√≠as guardar la imagen o enviarla a un servicio de almacenamiento
            console.log('üñºÔ∏è Imagen de resultados generada');
            
        } catch (error) {
            console.error('Error generating results image:', error);
        }
    }

    async notifyResults(drawResult) {
        try {
            const message = `üéâ ¬°Sorteo completado! üé∞\n\n` +
                          `üèÜ N√∫meros ganadores: ${drawResult.winningNumbers.join(', ')}\n` +
                          `üë• Ganadores: ${drawResult.winners?.length || 0}\n` +
                          `üîó Transacci√≥n: ${drawResult.transactionHash}\n\n` +
                          `¬°Felicidades a todos los ganadores! üéä`;
            
            console.log('üì¢ Notificaci√≥n de resultados:', message);
            
            // Aqu√≠ podr√≠as integrar con servicios de notificaci√≥n:
            // - Twitter API
            // - Discord webhook
            // - Telegram bot
            // - Email notifications
            
        } catch (error) {
            console.error('Error notifying results:', error);
        }
    }

    async notifyError(title, error) {
        try {
            const message = `‚ùå ${title}\n\n` +
                          `Error: ${error.message}\n` +
                          `Timestamp: ${new Date().toISOString()}`;
            
            console.log('üö® Notificaci√≥n de error:', message);
            
            // Aqu√≠ podr√≠as enviar alertas a administradores
            
        } catch (notifyError) {
            console.error('Error notifying error:', notifyError);
        }
    }

    // M√©todo para ejecutar sorteo manualmente (para testing)
    async executeManualDraw() {
        console.log('üéØ Ejecutando sorteo manual...');
        await this.executeWeeklyDraw();
    }

    // M√©todo para obtener pr√≥ximos sorteos programados
    getNextScheduledDraws() {
        const now = new Date();
        const nextMonday = this.getNextMonday(now);
        const followingMonday = this.getNextMonday(new Date(nextMonday.getTime() + 7 * 24 * 60 * 60 * 1000));
        
        return {
            next: nextMonday,
            following: followingMonday
        };
    }

    getNextMonday(date) {
        const dayOfWeek = date.getDay();
        const daysUntilMonday = dayOfWeek === 0 ? 1 : 8 - dayOfWeek;
        const nextMonday = new Date(date);
        nextMonday.setDate(date.getDate() + daysUntilMonday);
        nextMonday.setHours(0, 0, 0, 0);
        return nextMonday;
    }

    // Obtener estado del programador
    getStatus() {
        return {
            isRunning: this.isRunning,
            tasks: Array.from(this.tasks.keys()),
            nextDraws: this.getNextScheduledDraws()
        };
    }

    // Detener el programador
    stop() {
        console.log('üõë Deteniendo programador de tareas...');
        
        this.tasks.forEach((task, name) => {
            task.stop();
            console.log(`‚èπÔ∏è Tarea detenida: ${name}`);
        });
        
        this.tasks.clear();
        this.isRunning = false;
        
        console.log('‚úÖ Programador de tareas detenido');
    }

    // Reiniciar el programador
    restart() {
        console.log('üîÑ Reiniciando programador de tareas...');
        this.stop();
        this.initialize();
    }
}

module.exports = new Scheduler();
